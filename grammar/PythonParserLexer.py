# Generated from PythonParser.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,119,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,
        6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,
        1,12,1,12,1,12,1,13,3,13,77,8,13,1,13,4,13,80,8,13,11,13,12,13,81,
        1,14,3,14,85,8,14,1,14,5,14,88,8,14,10,14,12,14,91,9,14,1,14,1,14,
        4,14,95,8,14,11,14,12,14,96,1,15,3,15,100,8,15,1,15,4,15,103,8,15,
        11,15,12,15,104,1,15,5,15,108,8,15,10,15,12,15,111,9,15,1,16,4,16,
        114,8,16,11,16,12,16,115,1,16,1,16,0,0,17,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        1,0,5,2,0,43,43,45,45,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,
        65,90,95,95,97,122,3,0,9,10,13,13,32,32,127,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,1,35,1,0,0,0,3,47,1,0,0,0,5,49,1,0,0,0,7,51,1,0,0,0,9,53,1,0,0,
        0,11,55,1,0,0,0,13,57,1,0,0,0,15,59,1,0,0,0,17,61,1,0,0,0,19,63,
        1,0,0,0,21,66,1,0,0,0,23,69,1,0,0,0,25,72,1,0,0,0,27,76,1,0,0,0,
        29,84,1,0,0,0,31,99,1,0,0,0,33,113,1,0,0,0,35,36,5,100,0,0,36,37,
        5,101,0,0,37,38,5,102,0,0,38,39,5,32,0,0,39,40,5,109,0,0,40,41,5,
        97,0,0,41,42,5,105,0,0,42,43,5,110,0,0,43,44,5,40,0,0,44,45,5,41,
        0,0,45,46,5,58,0,0,46,2,1,0,0,0,47,48,5,9,0,0,48,4,1,0,0,0,49,50,
        5,10,0,0,50,6,1,0,0,0,51,52,5,43,0,0,52,8,1,0,0,0,53,54,5,45,0,0,
        54,10,1,0,0,0,55,56,5,42,0,0,56,12,1,0,0,0,57,58,5,47,0,0,58,14,
        1,0,0,0,59,60,5,37,0,0,60,16,1,0,0,0,61,62,5,61,0,0,62,18,1,0,0,
        0,63,64,5,43,0,0,64,65,5,61,0,0,65,20,1,0,0,0,66,67,5,45,0,0,67,
        68,5,61,0,0,68,22,1,0,0,0,69,70,5,42,0,0,70,71,5,61,0,0,71,24,1,
        0,0,0,72,73,5,47,0,0,73,74,5,61,0,0,74,26,1,0,0,0,75,77,7,0,0,0,
        76,75,1,0,0,0,76,77,1,0,0,0,77,79,1,0,0,0,78,80,7,1,0,0,79,78,1,
        0,0,0,80,81,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,28,1,0,0,0,83,
        85,7,0,0,0,84,83,1,0,0,0,84,85,1,0,0,0,85,89,1,0,0,0,86,88,7,1,0,
        0,87,86,1,0,0,0,88,91,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,92,
        1,0,0,0,91,89,1,0,0,0,92,94,5,46,0,0,93,95,7,1,0,0,94,93,1,0,0,0,
        95,96,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,30,1,0,0,0,98,100,7,
        0,0,0,99,98,1,0,0,0,99,100,1,0,0,0,100,102,1,0,0,0,101,103,7,2,0,
        0,102,101,1,0,0,0,103,104,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,
        0,105,109,1,0,0,0,106,108,7,3,0,0,107,106,1,0,0,0,108,111,1,0,0,
        0,109,107,1,0,0,0,109,110,1,0,0,0,110,32,1,0,0,0,111,109,1,0,0,0,
        112,114,7,4,0,0,113,112,1,0,0,0,114,115,1,0,0,0,115,113,1,0,0,0,
        115,116,1,0,0,0,116,117,1,0,0,0,117,118,6,16,0,0,118,34,1,0,0,0,
        10,0,76,81,84,89,96,99,104,109,115,1,6,0,0
    ]

class PythonParserLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    INT = 14
    FLOAT = 15
    VARNAME = 16
    WS = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'def main():'", "'\\t'", "'\\n'", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'='", "'+='", "'-='", "'*='", "'/='" ]

    symbolicNames = [ "<INVALID>",
            "INT", "FLOAT", "VARNAME", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "INT", 
                  "FLOAT", "VARNAME", "WS" ]

    grammarFileName = "PythonParser.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


