# Generated from PythonParser.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,22,147,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
        5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,3,9,65,8,9,1,9,4,9,68,8,9,11,9,
        12,9,69,1,10,3,10,73,8,10,1,10,5,10,76,8,10,10,10,12,10,79,9,10,
        1,10,1,10,4,10,83,8,10,11,10,12,10,84,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,3,11,96,8,11,1,12,1,12,5,12,100,8,12,10,12,12,
        12,103,9,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,4,14,112,8,14,11,
        14,12,14,113,1,14,5,14,117,8,14,10,14,12,14,120,9,14,1,15,1,15,1,
        15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,4,19,135,8,
        19,11,19,12,19,136,1,20,1,20,1,21,4,21,142,8,21,11,21,12,21,143,
        1,21,1,21,1,101,0,22,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,1,0,6,2,0,43,43,45,45,1,0,48,57,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,2,0,10,10,13,13,2,0,9,9,32,32,157,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,1,45,1,0,0,0,3,47,1,0,0,0,5,49,1,0,0,0,7,51,1,
        0,0,0,9,53,1,0,0,0,11,55,1,0,0,0,13,57,1,0,0,0,15,59,1,0,0,0,17,
        61,1,0,0,0,19,64,1,0,0,0,21,72,1,0,0,0,23,95,1,0,0,0,25,97,1,0,0,
        0,27,106,1,0,0,0,29,111,1,0,0,0,31,121,1,0,0,0,33,124,1,0,0,0,35,
        127,1,0,0,0,37,130,1,0,0,0,39,134,1,0,0,0,41,138,1,0,0,0,43,141,
        1,0,0,0,45,46,5,61,0,0,46,2,1,0,0,0,47,48,5,43,0,0,48,4,1,0,0,0,
        49,50,5,45,0,0,50,6,1,0,0,0,51,52,5,42,0,0,52,8,1,0,0,0,53,54,5,
        47,0,0,54,10,1,0,0,0,55,56,5,37,0,0,56,12,1,0,0,0,57,58,5,91,0,0,
        58,14,1,0,0,0,59,60,5,44,0,0,60,16,1,0,0,0,61,62,5,93,0,0,62,18,
        1,0,0,0,63,65,7,0,0,0,64,63,1,0,0,0,64,65,1,0,0,0,65,67,1,0,0,0,
        66,68,7,1,0,0,67,66,1,0,0,0,68,69,1,0,0,0,69,67,1,0,0,0,69,70,1,
        0,0,0,70,20,1,0,0,0,71,73,7,0,0,0,72,71,1,0,0,0,72,73,1,0,0,0,73,
        77,1,0,0,0,74,76,7,1,0,0,75,74,1,0,0,0,76,79,1,0,0,0,77,75,1,0,0,
        0,77,78,1,0,0,0,78,80,1,0,0,0,79,77,1,0,0,0,80,82,5,46,0,0,81,83,
        7,1,0,0,82,81,1,0,0,0,83,84,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,
        85,22,1,0,0,0,86,87,5,84,0,0,87,88,5,114,0,0,88,89,5,117,0,0,89,
        96,5,101,0,0,90,91,5,70,0,0,91,92,5,97,0,0,92,93,5,108,0,0,93,94,
        5,115,0,0,94,96,5,101,0,0,95,86,1,0,0,0,95,90,1,0,0,0,96,24,1,0,
        0,0,97,101,5,34,0,0,98,100,9,0,0,0,99,98,1,0,0,0,100,103,1,0,0,0,
        101,102,1,0,0,0,101,99,1,0,0,0,102,104,1,0,0,0,103,101,1,0,0,0,104,
        105,5,34,0,0,105,26,1,0,0,0,106,107,5,39,0,0,107,108,9,0,0,0,108,
        109,5,39,0,0,109,28,1,0,0,0,110,112,7,2,0,0,111,110,1,0,0,0,112,
        113,1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,0,114,118,1,0,0,0,115,
        117,7,3,0,0,116,115,1,0,0,0,117,120,1,0,0,0,118,116,1,0,0,0,118,
        119,1,0,0,0,119,30,1,0,0,0,120,118,1,0,0,0,121,122,5,43,0,0,122,
        123,5,61,0,0,123,32,1,0,0,0,124,125,5,45,0,0,125,126,5,61,0,0,126,
        34,1,0,0,0,127,128,5,42,0,0,128,129,5,61,0,0,129,36,1,0,0,0,130,
        131,5,47,0,0,131,132,5,61,0,0,132,38,1,0,0,0,133,135,7,4,0,0,134,
        133,1,0,0,0,135,136,1,0,0,0,136,134,1,0,0,0,136,137,1,0,0,0,137,
        40,1,0,0,0,138,139,5,9,0,0,139,42,1,0,0,0,140,142,7,5,0,0,141,140,
        1,0,0,0,142,143,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,145,
        1,0,0,0,145,146,6,21,0,0,146,44,1,0,0,0,12,0,64,69,72,77,84,95,101,
        113,118,136,143,1,6,0,0
    ]

class PythonParserLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    INT = 10
    FLOAT = 11
    BOOL = 12
    STRING = 13
    CHAR = 14
    VARNAME = 15
    PLUSEQ = 16
    MINUSEQ = 17
    MULTEQ = 18
    DIVEQ = 19
    NEWLINE = 20
    INDENT = 21
    WS = 22

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'['", "','", "']'", 
            "'+='", "'-='", "'*='", "'/='", "'\\t'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "FLOAT", "BOOL", "STRING", "CHAR", "VARNAME", "PLUSEQ", 
            "MINUSEQ", "MULTEQ", "DIVEQ", "NEWLINE", "INDENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "INT", "FLOAT", "BOOL", "STRING", "CHAR", 
                  "VARNAME", "PLUSEQ", "MINUSEQ", "MULTEQ", "DIVEQ", "NEWLINE", 
                  "INDENT", "WS" ]

    grammarFileName = "PythonParser.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


