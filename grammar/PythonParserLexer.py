# Generated from PythonParser.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,22,146,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
        5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,
        1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,3,14,80,8,14,1,14,4,14,83,
        8,14,11,14,12,14,84,1,15,3,15,88,8,15,1,15,5,15,91,8,15,10,15,12,
        15,94,9,15,1,15,1,15,4,15,98,8,15,11,15,12,15,99,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,3,16,111,8,16,1,17,1,17,5,17,115,8,
        17,10,17,12,17,118,9,17,1,17,1,17,1,18,4,18,123,8,18,11,18,12,18,
        124,1,18,5,18,128,8,18,10,18,12,18,131,9,18,1,19,4,19,134,8,19,11,
        19,12,19,135,1,20,1,20,1,21,4,21,141,8,21,11,21,12,21,142,1,21,1,
        21,0,0,22,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,1,
        0,6,2,0,43,43,45,45,1,0,48,57,4,0,48,57,65,90,95,95,97,122,3,0,65,
        90,95,95,97,122,2,0,10,10,13,13,2,0,9,9,32,32,156,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,1,45,1,0,0,0,3,47,1,0,0,0,5,49,1,0,0,0,7,51,1,0,0,0,9,53,
        1,0,0,0,11,55,1,0,0,0,13,57,1,0,0,0,15,60,1,0,0,0,17,63,1,0,0,0,
        19,66,1,0,0,0,21,69,1,0,0,0,23,72,1,0,0,0,25,74,1,0,0,0,27,76,1,
        0,0,0,29,79,1,0,0,0,31,87,1,0,0,0,33,110,1,0,0,0,35,112,1,0,0,0,
        37,122,1,0,0,0,39,133,1,0,0,0,41,137,1,0,0,0,43,140,1,0,0,0,45,46,
        5,61,0,0,46,2,1,0,0,0,47,48,5,43,0,0,48,4,1,0,0,0,49,50,5,45,0,0,
        50,6,1,0,0,0,51,52,5,42,0,0,52,8,1,0,0,0,53,54,5,47,0,0,54,10,1,
        0,0,0,55,56,5,37,0,0,56,12,1,0,0,0,57,58,5,43,0,0,58,59,5,61,0,0,
        59,14,1,0,0,0,60,61,5,45,0,0,61,62,5,61,0,0,62,16,1,0,0,0,63,64,
        5,42,0,0,64,65,5,61,0,0,65,18,1,0,0,0,66,67,5,47,0,0,67,68,5,61,
        0,0,68,20,1,0,0,0,69,70,5,37,0,0,70,71,5,61,0,0,71,22,1,0,0,0,72,
        73,5,91,0,0,73,24,1,0,0,0,74,75,5,44,0,0,75,26,1,0,0,0,76,77,5,93,
        0,0,77,28,1,0,0,0,78,80,7,0,0,0,79,78,1,0,0,0,79,80,1,0,0,0,80,82,
        1,0,0,0,81,83,7,1,0,0,82,81,1,0,0,0,83,84,1,0,0,0,84,82,1,0,0,0,
        84,85,1,0,0,0,85,30,1,0,0,0,86,88,7,0,0,0,87,86,1,0,0,0,87,88,1,
        0,0,0,88,92,1,0,0,0,89,91,7,1,0,0,90,89,1,0,0,0,91,94,1,0,0,0,92,
        90,1,0,0,0,92,93,1,0,0,0,93,95,1,0,0,0,94,92,1,0,0,0,95,97,5,46,
        0,0,96,98,7,1,0,0,97,96,1,0,0,0,98,99,1,0,0,0,99,97,1,0,0,0,99,100,
        1,0,0,0,100,32,1,0,0,0,101,102,5,84,0,0,102,103,5,114,0,0,103,104,
        5,117,0,0,104,111,5,101,0,0,105,106,5,70,0,0,106,107,5,97,0,0,107,
        108,5,108,0,0,108,109,5,115,0,0,109,111,5,101,0,0,110,101,1,0,0,
        0,110,105,1,0,0,0,111,34,1,0,0,0,112,116,5,34,0,0,113,115,7,2,0,
        0,114,113,1,0,0,0,115,118,1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,
        0,117,119,1,0,0,0,118,116,1,0,0,0,119,120,5,34,0,0,120,36,1,0,0,
        0,121,123,7,3,0,0,122,121,1,0,0,0,123,124,1,0,0,0,124,122,1,0,0,
        0,124,125,1,0,0,0,125,129,1,0,0,0,126,128,7,2,0,0,127,126,1,0,0,
        0,128,131,1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,38,1,0,0,0,
        131,129,1,0,0,0,132,134,7,4,0,0,133,132,1,0,0,0,134,135,1,0,0,0,
        135,133,1,0,0,0,135,136,1,0,0,0,136,40,1,0,0,0,137,138,5,9,0,0,138,
        42,1,0,0,0,139,141,7,5,0,0,140,139,1,0,0,0,141,142,1,0,0,0,142,140,
        1,0,0,0,142,143,1,0,0,0,143,144,1,0,0,0,144,145,6,21,0,0,145,44,
        1,0,0,0,12,0,79,84,87,92,99,110,116,124,129,135,142,1,6,0,0
    ]

class PythonParserLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    INT = 15
    FLOAT = 16
    BOOL = 17
    STRING = 18
    VARNAME = 19
    NEWLINE = 20
    INDENT = 21
    WS = 22

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'+='", "'-='", "'*='", 
            "'/='", "'%='", "'['", "','", "']'", "'\\t'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "FLOAT", "BOOL", "STRING", "VARNAME", "NEWLINE", "INDENT", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "INT", "FLOAT", "BOOL", "STRING", "VARNAME", "NEWLINE", 
                  "INDENT", "WS" ]

    grammarFileName = "PythonParser.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


